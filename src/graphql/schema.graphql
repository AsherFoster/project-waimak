enum Platform {
    NODEJS
}
enum BotState {
    STARTUP
    OK
    ERROR
}
enum ScriptState {
    RUNNING
    PASSIVE
    ERRORED
    STOPPED
}
scalar Date # ISO String

type User {
    id: String!
    name: String
    avatarUrl: String
    discordId: String
}
type ClientUser {
    id: String!
    name: String!
    avatarUrl: String!
    email: String!
    created: Date!
    discordId: String
}

type Bot {
    id: String!
    name: String!
    platform: Platform!
    resource_owner: User!
    avatarUrl: String
    created: Date
    created_by: User
    connection: BotConnection
    scripts(first: Int = 10, after: String): ScriptLinks!
    script(id: String!): ScriptLink
    permissions: [BotPermission!]! # At the moment this doesn't seem worth paginating
    token: String # Should this be viewable via the API?
}
type Bots {
    totalCount: Int!
    nodes: [Bot!]!
}
type BotConnection {
    state: BotState
    created: Date
}
input BotCreateInput {
    name: String!
    platform: String!
    token: String
    deviceCode: String!
}
input BotUpdateInput {
    id: String!
    name: String
    platform: String
}

enum BotPermissionQualifierType {
    USER
    ROLE
    CHANNEL
    GUILD
}
type BotPermissionQualifier {
    type: String!
    value: String!
}
type BotPermission {
    id: String!
    name: String!
    qualifiers: [BotPermissionQualifier!]!
}

type Script {
    id: String!
    name: String!
    body: String!
    platform: Platform!
    resource_owner: User!
    created: Date!
    createdBy: User!
    updated: Date
    updatedBy: User
}
type Scripts {
    totalCount: Int!
    nodes: [Script!]!
}
input ScriptCreateInput {
    name: String!
    body: String
    platform: Platform!
}
input ScriptUpdateInput {
    id: String!
    name: String
    body: String
    platform: Platform
}

type ScriptLink {
    script: Script!
    bot: Bot!
    started: Date!
    state: ScriptState!
    autostart: Boolean!
}
type ScriptLinks {
    totalCount: Int!
    nodes: [ScriptLink!]!
}

type Query {
    bots(first: Int = 10, after: String): Bots!
    bot(id: String!): Bot

    scripts(first: Int = 10, after: String): Scripts!
    script(id: String!): Script

    user: ClientUser!
}

type Mutation {
    # Script CRUD
    createScript(script: ScriptCreateInput!): Script
    updateScript(script: ScriptUpdateInput!): Script
    deleteScript(script: String!): String!

    # RunningScript CRUD
    runScriptOnBot(script: String!, bot: String!): ScriptLink
    stopScriptOnBot(script: String!, bot: String!): String!

    # Bot CRUD
    createBot(bot: BotCreateInput!): Bot
    updateBot(bot: BotUpdateInput!): Bot
    deleteBot(bot: String!): String!
}
